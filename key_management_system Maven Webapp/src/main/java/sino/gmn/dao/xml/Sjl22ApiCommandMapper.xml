<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sino.gmn.dao.Sjl22ApiCommandMapper">
  <resultMap id="BaseResultMap" type="sino.gmn.entity.Sjl22ApiCommand">
    <result column="s_id" jdbcType="INTEGER" property="sId" />
    <result column="s_command" jdbcType="VARCHAR" property="sCommand" />
    <result column="s_request" jdbcType="VARCHAR" property="sRequest" />
    <result column="s_response" jdbcType="VARCHAR" property="sResponse" />
    <result column="s_describe" jdbcType="VARCHAR" property="sDescribe" />
    <result column="s_update_time" jdbcType="TIMESTAMP" property="sUpdateTime" />
    <result column="s_update_user" jdbcType="VARCHAR" property="sUpdateUser" />
    <result column="s_status" jdbcType="INTEGER" property="sStatus" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    s_id, s_command, s_request, s_response, s_describe, s_update_time, s_update_user, 
    s_status
  </sql>
  <select id="selectByExample" parameterType="sino.gmn.entity.Sjl22ApiCommandExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sjl22_api_command
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="sino.gmn.entity.Sjl22ApiCommandExample">
    delete from sjl22_api_command
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="sino.gmn.entity.Sjl22ApiCommand">
    insert into sjl22_api_command (s_id, s_command, s_request, 
      s_response, s_describe, s_update_time, 
      s_update_user, s_status)
    values (#{sId,jdbcType=INTEGER}, #{sCommand,jdbcType=VARCHAR}, #{sRequest,jdbcType=VARCHAR}, 
      #{sResponse,jdbcType=VARCHAR}, #{sDescribe,jdbcType=VARCHAR}, #{sUpdateTime,jdbcType=TIMESTAMP}, 
      #{sUpdateUser,jdbcType=VARCHAR}, #{sStatus,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="sino.gmn.entity.Sjl22ApiCommand">
    insert into sjl22_api_command
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="sId != null">
        s_id,
      </if>
      <if test="sCommand != null">
        s_command,
      </if>
      <if test="sRequest != null">
        s_request,
      </if>
      <if test="sResponse != null">
        s_response,
      </if>
      <if test="sDescribe != null">
        s_describe,
      </if>
      <if test="sUpdateTime != null">
        s_update_time,
      </if>
      <if test="sUpdateUser != null">
        s_update_user,
      </if>
      <if test="sStatus != null">
        s_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="sId != null">
        #{sId,jdbcType=INTEGER},
      </if>
      <if test="sCommand != null">
        #{sCommand,jdbcType=VARCHAR},
      </if>
      <if test="sRequest != null">
        #{sRequest,jdbcType=VARCHAR},
      </if>
      <if test="sResponse != null">
        #{sResponse,jdbcType=VARCHAR},
      </if>
      <if test="sDescribe != null">
        #{sDescribe,jdbcType=VARCHAR},
      </if>
      <if test="sUpdateTime != null">
        #{sUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="sUpdateUser != null">
        #{sUpdateUser,jdbcType=VARCHAR},
      </if>
      <if test="sStatus != null">
        #{sStatus,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="sino.gmn.entity.Sjl22ApiCommandExample" resultType="java.lang.Long">
    select count(*) from sjl22_api_command
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update sjl22_api_command
    <set>
      <if test="record.sId != null">
        s_id = #{record.sId,jdbcType=INTEGER},
      </if>
      <if test="record.sCommand != null">
        s_command = #{record.sCommand,jdbcType=VARCHAR},
      </if>
      <if test="record.sRequest != null">
        s_request = #{record.sRequest,jdbcType=VARCHAR},
      </if>
      <if test="record.sResponse != null">
        s_response = #{record.sResponse,jdbcType=VARCHAR},
      </if>
      <if test="record.sDescribe != null">
        s_describe = #{record.sDescribe,jdbcType=VARCHAR},
      </if>
      <if test="record.sUpdateTime != null">
        s_update_time = #{record.sUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.sUpdateUser != null">
        s_update_user = #{record.sUpdateUser,jdbcType=VARCHAR},
      </if>
      <if test="record.sStatus != null">
        s_status = #{record.sStatus,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update sjl22_api_command
    set s_id = #{record.sId,jdbcType=INTEGER},
      s_command = #{record.sCommand,jdbcType=VARCHAR},
      s_request = #{record.sRequest,jdbcType=VARCHAR},
      s_response = #{record.sResponse,jdbcType=VARCHAR},
      s_describe = #{record.sDescribe,jdbcType=VARCHAR},
      s_update_time = #{record.sUpdateTime,jdbcType=TIMESTAMP},
      s_update_user = #{record.sUpdateUser,jdbcType=VARCHAR},
      s_status = #{record.sStatus,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <!-- manual -->
  <select id="selectSj" parameterType="int" resultMap="BaseResultMap">
  	SELECT s_id,s_command,s_request,s_response,s_describe,s_update_time,s_update_user,s_status FROM sjl22_api_command WHERE s_id=#{id}
  </select>
  
  <select id="selectAllSj" resultMap="BaseResultMap">
  	SELECT s_id,s_command,s_request,s_response,s_describe,s_update_time,s_update_user,s_status FROM `sjl22_api_command` WHERE s_status=1
  </select>
  
  <select id="getCount" resultType="int">
  	SELECT COUNT(s_id) FROM `sjl22_api_command` WHERE s_status=1
  </select>
  
  <select id="selectSjRecord" parameterType="int" resultMap="BaseResultMap">
	SELECT s_id,s_command,s_request,s_response,s_describe,s_update_time,s_update_user,s_status FROM sjl22_api_command WHERE s_status=1 LIMIT #{first},#{last};
  </select>
  
  <select id="selectSjRecordParam" parameterType="Map" resultMap="BaseResultMap">
	SELECT s_id,s_command,s_request,s_response,s_describe,s_update_time,s_update_user,s_status FROM sjl22_api_command WHERE s_status=1 
	<if test="null != s_id">
		and s_id=#{s_id} 
	</if>
		<if test="null != s_command">
		and s_command=#{s_command} 
	</if>
		<if test="null != s_update_user">
		and s_update_user=#{s_update_user} 
	</if>
	LIMIT #{first},#{last};
  </select>
  
  <select id="getCountParam" parameterType="Map" resultType="int">
	SELECT COUNT(s_id) FROM `sjl22_api_command` WHERE s_status=1 
	<if test="null != s_id">
		and s_id=#{s_id} 
	</if>
		<if test="null != s_command">
		and s_command=#{s_command} 
	</if>
		<if test="null != s_update_user">
		and s_update_user=#{s_update_user} 
	</if>
  </select>
  
  
</mapper>


